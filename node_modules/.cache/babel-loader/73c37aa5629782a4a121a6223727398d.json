{"ast":null,"code":"var _asyncToGenerator = require(\"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar SafeEventEmitter = require('@metamask/safe-event-emitter').default;\nvar createScaffoldMiddleware = require('eth-json-rpc-middleware/scaffold');\nvar _require = require('json-rpc-engine'),\n  createAsyncMiddleware = _require.createAsyncMiddleware;\nvar createFilterMiddleware = require('./index.js');\nvar _require2 = require('./hexUtils.js'),\n  unsafeRandomBytes = _require2.unsafeRandomBytes,\n  incrementHexInt = _require2.incrementHexInt;\nvar getBlocksForRange = require('./getBlocksForRange.js');\nmodule.exports = createSubscriptionMiddleware;\nfunction createSubscriptionMiddleware(_ref) {\n  var blockTracker = _ref.blockTracker,\n    provider = _ref.provider;\n  // state and utilities for handling subscriptions\n  var subscriptions = {};\n  var filterManager = createFilterMiddleware({\n    blockTracker: blockTracker,\n    provider: provider\n  });\n\n  // internal flag\n  var isDestroyed = false;\n\n  // create subscriptionManager api object\n  var events = new SafeEventEmitter();\n  var middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe)\n  });\n  middleware.destroy = destroy;\n  return {\n    events: events,\n    middleware: middleware\n  };\n  function subscribe(_x, _x2) {\n    return _subscribe.apply(this, arguments);\n  }\n  function _subscribe() {\n    _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {\n      var subscriptionType, subId, sub, filterParams, filter, createSubNewHeads, createSubFromFilter;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            createSubFromFilter = function _createSubFromFilter(_ref4) {\n              var subId = _ref4.subId,\n                filter = _ref4.filter;\n              filter.on('update', function (result) {\n                return _emitSubscriptionResult(subId, result);\n              });\n              var sub = {\n                type: subscriptionType,\n                destroy: function () {\n                  var _destroy2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                      while (1) switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return filterManager.uninstallFilter(filter.idHex);\n                        case 2:\n                          return _context3.abrupt(\"return\", _context3.sent);\n                        case 3:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }, _callee3);\n                  }));\n                  function destroy() {\n                    return _destroy2.apply(this, arguments);\n                  }\n                  return destroy;\n                }()\n              };\n              return sub;\n            };\n            createSubNewHeads = function _createSubNewHeads(_ref2) {\n              var subId = _ref2.subId;\n              var sub = {\n                type: subscriptionType,\n                destroy: function () {\n                  var _destroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) switch (_context.prev = _context.next) {\n                        case 0:\n                          blockTracker.removeListener('sync', sub.update);\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }, _callee);\n                  }));\n                  function destroy() {\n                    return _destroy.apply(this, arguments);\n                  }\n                  return destroy;\n                }(),\n                update: function () {\n                  var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref3) {\n                    var oldBlock, newBlock, toBlock, fromBlock, rawBlocks, results;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                      while (1) switch (_context2.prev = _context2.next) {\n                        case 0:\n                          oldBlock = _ref3.oldBlock, newBlock = _ref3.newBlock;\n                          // for newHeads\n                          toBlock = newBlock;\n                          fromBlock = incrementHexInt(oldBlock);\n                          _context2.next = 5;\n                          return getBlocksForRange({\n                            provider: provider,\n                            fromBlock: fromBlock,\n                            toBlock: toBlock\n                          });\n                        case 5:\n                          rawBlocks = _context2.sent;\n                          results = rawBlocks.map(normalizeBlock);\n                          results.forEach(function (value) {\n                            _emitSubscriptionResult(subId, value);\n                          });\n                        case 8:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }, _callee2);\n                  }));\n                  function update(_x5) {\n                    return _update.apply(this, arguments);\n                  }\n                  return update;\n                }()\n              };\n              // check for subscription updates on new block\n              blockTracker.on('sync', sub.update);\n              return sub;\n            };\n            if (!isDestroyed) {\n              _context4.next = 4;\n              break;\n            }\n            throw new Error('SubscriptionManager - attempting to use after destroying');\n          case 4:\n            subscriptionType = req.params[0]; // subId is 16 byte hex string\n            subId = unsafeRandomBytes(16); // create sub\n            _context4.t0 = subscriptionType;\n            _context4.next = _context4.t0 === 'newHeads' ? 9 : _context4.t0 === 'logs' ? 11 : 17;\n            break;\n          case 9:\n            sub = createSubNewHeads({\n              subId: subId\n            });\n            return _context4.abrupt(\"break\", 18);\n          case 11:\n            filterParams = req.params[1];\n            _context4.next = 14;\n            return filterManager.newLogFilter(filterParams);\n          case 14:\n            filter = _context4.sent;\n            sub = createSubFromFilter({\n              subId: subId,\n              filter: filter\n            });\n            return _context4.abrupt(\"break\", 18);\n          case 17:\n            throw new Error(\"SubscriptionManager - unsupported subscription type \\\"\".concat(subscriptionType, \"\\\"\"));\n          case 18:\n            subscriptions[subId] = sub;\n            res.result = subId;\n            return _context4.abrupt(\"return\");\n          case 21:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _subscribe.apply(this, arguments);\n  }\n  function unsubscribe(_x3, _x4) {\n    return _unsubscribe.apply(this, arguments);\n  }\n  function _unsubscribe() {\n    _unsubscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {\n      var id, subscription;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!isDestroyed) {\n              _context5.next = 2;\n              break;\n            }\n            throw new Error('SubscriptionManager - attempting to use after destroying');\n          case 2:\n            id = req.params[0];\n            subscription = subscriptions[id]; // if missing, return \"false\" to indicate it was not removed\n            if (subscription) {\n              _context5.next = 7;\n              break;\n            }\n            res.result = false;\n            return _context5.abrupt(\"return\");\n          case 7:\n            // cleanup subscription\n            delete subscriptions[id];\n            _context5.next = 10;\n            return subscription.destroy();\n          case 10:\n            res.result = true;\n          case 11:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return _unsubscribe.apply(this, arguments);\n  }\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value\n      }\n    });\n  }\n  function destroy() {\n    events.removeAllListeners();\n    for (var id in subscriptions) {\n      subscriptions[id].destroy();\n      delete subscriptions[id];\n    }\n    isDestroyed = true;\n  }\n}\nfunction normalizeBlock(block) {\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData\n  };\n}","map":{"version":3,"names":["SafeEventEmitter","require","default","createScaffoldMiddleware","createAsyncMiddleware","createFilterMiddleware","unsafeRandomBytes","incrementHexInt","getBlocksForRange","module","exports","createSubscriptionMiddleware","blockTracker","provider","subscriptions","filterManager","isDestroyed","events","middleware","eth_subscribe","subscribe","eth_unsubscribe","unsubscribe","destroy","req","res","createSubNewHeads","createSubFromFilter","subId","filter","on","result","_emitSubscriptionResult","sub","type","subscriptionType","uninstallFilter","idHex","removeListener","update","oldBlock","newBlock","toBlock","fromBlock","rawBlocks","results","map","normalizeBlock","forEach","value","Error","params","filterParams","newLogFilter","id","subscription","filterIdHex","emit","jsonrpc","method","removeAllListeners","block","hash","parentHash","sha3Uncles","miner","stateRoot","transactionsRoot","receiptsRoot","logsBloom","difficulty","number","gasLimit","gasUsed","nonce","mixHash","timestamp","extraData"],"sources":["C:/Users/USER/Documents/Work_hub/node_modules/eth-json-rpc-filters/subscriptionManager.js"],"sourcesContent":["const SafeEventEmitter = require('@metamask/safe-event-emitter').default\nconst createScaffoldMiddleware = require('eth-json-rpc-middleware/scaffold')\nconst { createAsyncMiddleware } = require('json-rpc-engine')\nconst createFilterMiddleware = require('./index.js')\nconst { unsafeRandomBytes, incrementHexInt } = require('./hexUtils.js')\nconst getBlocksForRange = require('./getBlocksForRange.js')\n\nmodule.exports = createSubscriptionMiddleware\n\n\nfunction createSubscriptionMiddleware({ blockTracker, provider }) {\n  // state and utilities for handling subscriptions\n  const subscriptions = {}\n  const filterManager = createFilterMiddleware({ blockTracker, provider })\n\n  // internal flag\n  let isDestroyed = false\n\n  // create subscriptionManager api object\n  const events = new SafeEventEmitter()\n  const middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe),\n  })\n  middleware.destroy = destroy\n  return { events, middleware }\n\n  async function subscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const subscriptionType = req.params[0]\n    // subId is 16 byte hex string\n    const subId = unsafeRandomBytes(16)\n\n    // create sub\n    let sub\n    switch (subscriptionType) {\n      case 'newHeads':\n        sub = createSubNewHeads({ subId })\n        break\n      case 'logs':\n        const filterParams = req.params[1]\n        const filter = await filterManager.newLogFilter(filterParams)\n        sub = createSubFromFilter({ subId, filter })\n        break\n      default:\n        throw new Error(`SubscriptionManager - unsupported subscription type \"${subscriptionType}\"`)\n\n    }\n    subscriptions[subId] = sub\n\n    res.result = subId\n    return\n\n    function createSubNewHeads({ subId }) {\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          blockTracker.removeListener('sync', sub.update)\n        },\n        update: async ({ oldBlock, newBlock }) => {\n          // for newHeads\n          const toBlock = newBlock\n          const fromBlock = incrementHexInt(oldBlock)\n          const rawBlocks = await getBlocksForRange({ provider, fromBlock, toBlock })\n          const results = rawBlocks.map(normalizeBlock)\n          results.forEach((value) => {\n            _emitSubscriptionResult(subId, value)\n          })\n        }\n      }\n      // check for subscription updates on new block\n      blockTracker.on('sync', sub.update)\n      return sub\n    }\n\n    function createSubFromFilter({ subId, filter }){\n      filter.on('update', result => _emitSubscriptionResult(subId, result))\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          return await filterManager.uninstallFilter(filter.idHex)\n        },\n      }\n      return sub\n    }\n  }\n\n  async function unsubscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const id = req.params[0]\n    const subscription = subscriptions[id]\n    // if missing, return \"false\" to indicate it was not removed\n    if (!subscription) {\n      res.result = false\n      return\n    }\n    // cleanup subscription\n    delete subscriptions[id]\n    await subscription.destroy()\n    res.result = true\n  }\n\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value,\n      },\n    })\n  }\n\n  function destroy () {\n    events.removeAllListeners()\n    for (const id in subscriptions) {\n      subscriptions[id].destroy()\n      delete subscriptions[id]\n    }\n    isDestroyed = true\n  }\n}\n\nfunction normalizeBlock(block) {\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}