{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\src\\\\context\\\\TransactionContext.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport workchop from '../abis/workchop.json';\nimport \"reactstrap/lib/\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nexport const TransactionContext = React.createContext();\nconst {\n  ethereum\n} = window;\nexport const TransactionProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const [state, setState] = useState({\n    web3: null,\n    contract: null,\n    email: '',\n    account: '',\n    accountId: '',\n    signedIn: false,\n    loaded: false\n  });\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const initWeb3 = async () => {\n    if (window.ethereum) {\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      try {\n        const web3 = new Web3(window.ethereum);\n        const account = (await web3.eth.getAccounts())[0];\n        const netId = await web3.eth.net.getId();\n        const address = workchop.networks[netId].address;\n        const contract = new web3.eth.Contract(workchop.abi, address);\n        const accountId = await contract.methods.address_to_id(account).call();\n        setState({\n          ...state,\n          web3,\n          account,\n          contract,\n          accountId,\n          loaded: true\n        });\n        window.location.reload();\n        console.log('setup complete');\n      } catch (e) {\n        alert(e);\n      }\n    } else {\n      alert('web3 not detected');\n    }\n  };\n  const connectWallet = async () => {\n    try {\n      if (!ethereum) return alert(\"Please install MetaMask.\");\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setCurrentAccount(accounts[0]);\n      window.location.reload();\n    } catch (error) {\n      console.log(error);\n      throw new Error(\"No ethereum object\");\n    }\n  };\n  const login = async () => {\n    try {\n      const accountType = await state.contract.methods.login(state.email).call({\n        from: state.account\n      });\n      console.log('account type:', accountType);\n      setState({\n        ...state,\n        signedIn: true\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  const signUp = async () => {\n    try {\n      await state.contract.methods.sign_up(state.email, 'name', 'user').send({\n        from: state.account\n      });\n      alert('signed up');\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  const requestCompany = async (startDate, endDate, role, companyId) => {\n    try {\n      await state.contract.methods.add_experience(state.accountId, startDate, endDate, role, companyId);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  const approveEmployee = async (experienceId, companyId) => {\n    try {\n      await state.contract.methods.approve_experience(experienceId, companyId);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  const updateWallet = async newAddress => {\n    try {\n      await state.contract.methods.update_wallet_address(state.email, newAddress);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  const approveManager = async empId => {\n    try {\n      await state.contract.methods.approve_manager(empId);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  const addCertificate = async (certUrl, issueDate, validTill, certName, issuer, linkedSkill) => {\n    try {\n      await state.contract.methods.add_certification(state.accountId, certUrl, issueDate, validTill, certName, issuer, linkedSkill);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  const addSkill = async skillName => {\n    try {\n      await state.contract.methods.add_skill(state.accountId, skillName);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  const endorseSkill = async (empId, skillId, comment) => {\n    const date = new Date();\n    try {\n      await state.contract.methods.endorse_skill(empId, skillId, `${date.getMonth()} ${date.getFullYear()}`, comment);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  // useEffect(() => {\n  //   initWeb3();\n  // });\n\n  return /*#__PURE__*/React.createElement(TransactionContext.Provider, {\n    value: {\n      connectWallet,\n      currentAccount,\n      login,\n      signUp,\n      requestCompany,\n      approveEmployee,\n      updateWallet,\n      approveManager,\n      addCertificate,\n      addSkill,\n      endorseSkill\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 6\n    }\n  }, children);\n};","map":{"version":3,"names":["React","useState","useEffect","Web3","workchop","TransactionContext","createContext","ethereum","window","TransactionProvider","children","state","setState","web3","contract","email","account","accountId","signedIn","loaded","currentAccount","setCurrentAccount","initWeb3","request","method","eth","getAccounts","netId","net","getId","address","networks","Contract","abi","methods","address_to_id","call","location","reload","console","log","e","alert","connectWallet","accounts","error","Error","login","accountType","from","signUp","sign_up","send","requestCompany","startDate","endDate","role","companyId","add_experience","approveEmployee","experienceId","approve_experience","updateWallet","newAddress","update_wallet_address","approveManager","empId","approve_manager","addCertificate","certUrl","issueDate","validTill","certName","issuer","linkedSkill","add_certification","addSkill","skillName","add_skill","endorseSkill","skillId","comment","date","Date","endorse_skill","getMonth","getFullYear"],"sources":["C:/Users/USER/Documents/Work_hub/src/context/TransactionContext.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Web3 from 'web3';\r\nimport workchop from '../abis/workchop.json';\r\nimport \"reactstrap/lib/\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nexport const TransactionContext = React.createContext();\r\nconst { ethereum } = window;\r\nexport const TransactionProvider = ({ children }) => {\r\n  const [state, setState] = useState({\r\n    web3: null,\r\n    contract: null,\r\n    email: '',\r\n    account: '',\r\n    accountId: '',\r\n    signedIn: false,\r\n    loaded: false,\r\n  });\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n\r\n  const initWeb3 = async () => {\r\n    if (window.ethereum) {\r\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n      try {\r\n        const web3 = new Web3(window.ethereum);\r\n        const account = (await web3.eth.getAccounts())[0];\r\n        const netId = await web3.eth.net.getId();\r\n        const address = workchop.networks[netId].address;\r\n        const contract = new web3.eth.Contract(workchop.abi, address);\r\n        const accountId = await contract.methods.address_to_id(account).call();\r\n        setState({\r\n          ...state,\r\n          web3,\r\n          account,\r\n          contract,\r\n          accountId,\r\n          loaded: true,\r\n        });\r\n        window.location.reload();\r\n        console.log('setup complete');\r\n      } catch (e) {\r\n        alert(e);\r\n      }\r\n    } else {\r\n      alert('web3 not detected');\r\n    }\r\n  };\r\n  const connectWallet = async () => {\r\n    try {\r\n      if (!ethereum) return alert(\"Please install MetaMask.\");\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\", });\r\n\r\n      setCurrentAccount(accounts[0]);\r\n      window.location.reload();\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n      throw new Error(\"No ethereum object\");\r\n    }\r\n  };\r\n\r\n  const login = async () => {\r\n    try {\r\n      const accountType = await state.contract.methods.login(state.email).call({\r\n        from: state.account,\r\n      });\r\n      console.log('account type:', accountType);\r\n      setState({ ...state, signedIn: true });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  const signUp = async () => {\r\n    try {\r\n      await state.contract.methods\r\n        .sign_up(state.email, 'name', 'user')\r\n        .send({ from: state.account });\r\n      alert('signed up');\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  const requestCompany = async (startDate, endDate, role, companyId) => {\r\n    try {\r\n      await state.contract.methods.add_experience(\r\n        state.accountId,\r\n        startDate,\r\n        endDate,\r\n        role,\r\n        companyId\r\n      );\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  const approveEmployee = async (experienceId, companyId) => {\r\n    try {\r\n      await state.contract.methods.approve_experience(experienceId, companyId);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  const updateWallet = async (newAddress) => {\r\n    try {\r\n      await state.contract.methods.update_wallet_address(state.email, newAddress);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  const approveManager = async (empId) => {\r\n    try {\r\n      await state.contract.methods.approve_manager(empId);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  const addCertificate = async (\r\n    certUrl,\r\n    issueDate,\r\n    validTill,\r\n    certName,\r\n    issuer,\r\n    linkedSkill\r\n  ) => {\r\n    try {\r\n      await state.contract.methods.add_certification(\r\n        state.accountId,\r\n        certUrl,\r\n        issueDate,\r\n        validTill,\r\n        certName,\r\n        issuer,\r\n        linkedSkill\r\n      );\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  const addSkill = async (skillName) => {\r\n    try {\r\n      await state.contract.methods.add_skill(state.accountId, skillName);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  const endorseSkill = async (empId, skillId, comment) => {\r\n    const date = new Date();\r\n    try {\r\n      await state.contract.methods.endorse_skill(\r\n        empId,\r\n        skillId,\r\n        `${date.getMonth()} ${date.getFullYear()}`,\r\n        comment\r\n      );\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   initWeb3();\r\n  // });\r\n\r\n  \r\n    return (\r\n     <TransactionContext.Provider\r\n        value={{\r\n          connectWallet,\r\n          currentAccount,\r\n          login,\r\n          signUp,\r\n          requestCompany,\r\n          approveEmployee,\r\n          updateWallet,\r\n          approveManager,\r\n          addCertificate,\r\n          addSkill,\r\n          endorseSkill,\r\n\r\n\r\n\r\n        }}\r\n     >\r\n      {children}\r\n     </TransactionContext.Provider>\r\n\r\n    );\r\n  };\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}