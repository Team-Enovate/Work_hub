{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport aes from \"aes-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { Description } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { getPassword, looseArrayify, searchPath } from \"./utils\";\nexport var CrowdsaleAccount = /*#__PURE__*/function (_Description) {\n  _inherits(CrowdsaleAccount, _Description);\n  var _super = _createSuper(CrowdsaleAccount);\n  function CrowdsaleAccount() {\n    _classCallCheck(this, CrowdsaleAccount);\n    return _super.apply(this, arguments);\n  }\n  _createClass(CrowdsaleAccount, [{\n    key: \"isCrowdsaleAccount\",\n    value: function isCrowdsaleAccount(value) {\n      return !!(value && value._isCrowdsaleAccount);\n    }\n  }]);\n  return CrowdsaleAccount;\n}(Description);\n// See: https://github.com/ethereum/pyethsaletool\nexport function decrypt(json, password) {\n  var data = JSON.parse(json);\n  password = getPassword(password);\n  // Ethereum Address\n  var ethaddr = getAddress(searchPath(data, \"ethaddr\"));\n  // Encrypted Seed\n  var encseed = looseArrayify(searchPath(data, \"encseed\"));\n  if (!encseed || encseed.length % 16 !== 0) {\n    logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n  }\n  var key = arrayify(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n  var iv = encseed.slice(0, 16);\n  var encryptedSeed = encseed.slice(16);\n  // Decrypt the seed\n  var aesCbc = new aes.ModeOfOperation.cbc(key, iv);\n  var seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));\n  // This wallet format is weird... Convert the binary encoded hex to a string.\n  var seedHex = \"\";\n  for (var i = 0; i < seed.length; i++) {\n    seedHex += String.fromCharCode(seed[i]);\n  }\n  var seedHexBytes = toUtf8Bytes(seedHex);\n  var privateKey = keccak256(seedHexBytes);\n  return new CrowdsaleAccount({\n    _isCrowdsaleAccount: true,\n    address: ethaddr,\n    privateKey: privateKey\n  });\n}","map":{"version":3,"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAEb,OAAOA,GAAG,MAAM,QAAQ;AAGxB,SAASC,UAAU,QAAQ,wBAAwB;AACnD,SAASC,QAAQ,QAAe,sBAAsB;AACtD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,WAAW,QAAQ,2BAA2B;AAEvD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,IAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC,SAASE,WAAW,EAAEC,aAAa,EAAEC,UAAU,QAAQ,SAAS;AAShE,WAAaC,gBAAiB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAQ1B,4BAAmBC,KAAU;MACzB,OAAO,CAAC,EAAEA,KAAK,IAAIA,KAAK,CAACC,mBAAmB,CAAC;IACjD;EAAC;EAAA;AAAA,EAViCT,WAA8B;AAapE;AACA,OAAM,SAAUU,OAAO,CAACC,IAAY,EAAEC,QAAwB;EAC1D,IAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC;EAE7BC,QAAQ,GAAGR,WAAW,CAACQ,QAAQ,CAAC;EAEhC;EACA,IAAMI,OAAO,GAAGrB,UAAU,CAACW,UAAU,CAACO,IAAI,EAAE,SAAS,CAAC,CAAC;EAEvD;EACA,IAAMI,OAAO,GAAGZ,aAAa,CAACC,UAAU,CAACO,IAAI,EAAE,SAAS,CAAC,CAAC;EAC1D,IAAI,CAACI,OAAO,IAAKA,OAAO,CAACC,MAAM,GAAG,EAAE,KAAM,CAAC,EAAE;IACzCf,MAAM,CAACgB,kBAAkB,CAAC,iBAAiB,EAAE,MAAM,EAAER,IAAI,CAAC;;EAG9D,IAAMS,GAAG,GAAGxB,QAAQ,CAACE,MAAM,CAACc,QAAQ,EAAEA,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,CAACS,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAEjF,IAAMC,EAAE,GAAGL,OAAO,CAACI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAC/B,IAAME,aAAa,GAAGN,OAAO,CAACI,KAAK,CAAC,EAAE,CAAC;EAEvC;EACA,IAAMG,MAAM,GAAG,IAAI9B,GAAG,CAAC+B,eAAe,CAACC,GAAG,CAACN,GAAG,EAAEE,EAAE,CAAC;EACnD,IAAMK,IAAI,GAAGjC,GAAG,CAACkC,OAAO,CAACC,KAAK,CAACC,KAAK,CAAClC,QAAQ,CAAC4B,MAAM,CAACd,OAAO,CAACa,aAAa,CAAC,CAAC,CAAC;EAE7E;EACA,IAAIQ,OAAO,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACT,MAAM,EAAEc,CAAC,EAAE,EAAE;IAClCD,OAAO,IAAIE,MAAM,CAACC,YAAY,CAACP,IAAI,CAACK,CAAC,CAAC,CAAC;;EAG3C,IAAMG,YAAY,GAAGpC,WAAW,CAACgC,OAAO,CAAC;EAEzC,IAAMK,UAAU,GAAGvC,SAAS,CAACsC,YAAY,CAAC;EAE1C,OAAO,IAAI5B,gBAAgB,CAAE;IACzBE,mBAAmB,EAAE,IAAI;IACzB4B,OAAO,EAAErB,OAAO;IAChBoB,UAAU,EAAEA;GACf,CAAC;AACN","names":["aes","getAddress","arrayify","keccak256","pbkdf2","toUtf8Bytes","Description","Logger","version","logger","getPassword","looseArrayify","searchPath","CrowdsaleAccount","value","_isCrowdsaleAccount","decrypt","json","password","data","JSON","parse","ethaddr","encseed","length","throwArgumentError","key","slice","iv","encryptedSeed","aesCbc","ModeOfOperation","cbc","seed","padding","pkcs7","strip","seedHex","i","String","fromCharCode","seedHexBytes","privateKey","address"],"sourceRoot":"","sources":["../src.ts/crowdsale.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}