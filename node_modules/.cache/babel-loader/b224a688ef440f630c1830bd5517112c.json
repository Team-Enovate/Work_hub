{"ast":null,"code":"var _asyncToGenerator = require(\"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar Mutex = require('async-mutex').Mutex;\nvar _require = require('json-rpc-engine'),\n  createAsyncMiddleware = _require.createAsyncMiddleware;\nvar createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold');\nvar LogFilter = require('./log-filter.js');\nvar BlockFilter = require('./block-filter.js');\nvar TxFilter = require('./tx-filter.js');\nvar _require2 = require('./hexUtils'),\n  intToHex = _require2.intToHex,\n  hexToInt = _require2.hexToInt;\nmodule.exports = createEthFilterMiddleware;\nfunction createEthFilterMiddleware(_ref) {\n  var blockTracker = _ref.blockTracker,\n    provider = _ref.provider;\n  // create filter collection\n  var filterIndex = 0;\n  var filters = {};\n  // create update mutex\n  var mutex = new Mutex();\n  var waitForFree = mutexMiddlewareWrapper({\n    mutex: mutex\n  });\n  var middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n  });\n\n  // setup filter updating and destroy handler\n  var filterUpdater = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n      var oldBlock, newBlock, releaseLock;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            oldBlock = _ref2.oldBlock, newBlock = _ref2.newBlock;\n            if (!(filters.length === 0)) {\n              _context2.next = 3;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 3:\n            _context2.next = 5;\n            return mutex.acquire();\n          case 5:\n            releaseLock = _context2.sent;\n            _context2.prev = 6;\n            _context2.next = 9;\n            return Promise.all(objValues(filters).map( /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(filter) {\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.prev = 0;\n                      _context.next = 3;\n                      return filter.update({\n                        oldBlock: oldBlock,\n                        newBlock: newBlock\n                      });\n                    case 3:\n                      _context.next = 8;\n                      break;\n                    case 5:\n                      _context.prev = 5;\n                      _context.t0 = _context[\"catch\"](0);\n                      // handle each error individually so filter update errors don't affect other filters\n                      console.error(_context.t0);\n                    case 8:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee, null, [[0, 5]]);\n              }));\n              return function (_x2) {\n                return _ref4.apply(this, arguments);\n              };\n            }()));\n          case 9:\n            _context2.next = 14;\n            break;\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](6);\n            // log error so we don't skip the releaseLock\n            console.error(_context2.t0);\n          case 14:\n            // unlock update reads\n            releaseLock();\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[6, 11]]);\n    }));\n    return function filterUpdater(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter;\n  middleware.newBlockFilter = newBlockFilter;\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n  middleware.uninstallFilter = uninstallFilterHandler;\n  middleware.getFilterChanges = getFilterChanges;\n  middleware.getFilterLogs = getFilterLogs;\n\n  // expose destroy method for cleanup\n  middleware.destroy = function () {\n    uninstallAllFilters();\n  };\n  return middleware;\n\n  //\n  // new filters\n  //\n  function newLogFilter(_x3) {\n    return _newLogFilter.apply(this, arguments);\n  }\n  function _newLogFilter() {\n    _newLogFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(params) {\n      var filter, filterIndex;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            filter = new LogFilter({\n              provider: provider,\n              params: params\n            });\n            _context3.next = 3;\n            return installFilter(filter);\n          case 3:\n            filterIndex = _context3.sent;\n            return _context3.abrupt(\"return\", filter);\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return _newLogFilter.apply(this, arguments);\n  }\n  function newBlockFilter() {\n    return _newBlockFilter.apply(this, arguments);\n  }\n  function _newBlockFilter() {\n    _newBlockFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var filter, filterIndex;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            filter = new BlockFilter({\n              provider: provider\n            });\n            _context4.next = 3;\n            return installFilter(filter);\n          case 3:\n            filterIndex = _context4.sent;\n            return _context4.abrupt(\"return\", filter);\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _newBlockFilter.apply(this, arguments);\n  }\n  function newPendingTransactionFilter() {\n    return _newPendingTransactionFilter.apply(this, arguments);\n  } //\n  // get filter changes\n  //\n  function _newPendingTransactionFilter() {\n    _newPendingTransactionFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var filter, filterIndex;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            filter = new TxFilter({\n              provider: provider\n            });\n            _context5.next = 3;\n            return installFilter(filter);\n          case 3:\n            filterIndex = _context5.sent;\n            return _context5.abrupt(\"return\", filter);\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return _newPendingTransactionFilter.apply(this, arguments);\n  }\n  function getFilterChanges(_x4) {\n    return _getFilterChanges.apply(this, arguments);\n  }\n  function _getFilterChanges() {\n    _getFilterChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(filterIndexHex) {\n      var filterIndex, filter, results;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            filterIndex = hexToInt(filterIndexHex);\n            filter = filters[filterIndex];\n            if (filter) {\n              _context6.next = 4;\n              break;\n            }\n            throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n          case 4:\n            results = filter.getChangesAndClear();\n            return _context6.abrupt(\"return\", results);\n          case 6:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return _getFilterChanges.apply(this, arguments);\n  }\n  function getFilterLogs(_x5) {\n    return _getFilterLogs.apply(this, arguments);\n  } //\n  // remove filters\n  //\n  function _getFilterLogs() {\n    _getFilterLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(filterIndexHex) {\n      var filterIndex, filter;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            filterIndex = hexToInt(filterIndexHex);\n            filter = filters[filterIndex];\n            if (filter) {\n              _context7.next = 4;\n              break;\n            }\n            throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n          case 4:\n            // only return results for log filters\n            if (filter.type === 'log') {\n              results = filter.getAllResults();\n            } else {\n              results = [];\n            }\n            return _context7.abrupt(\"return\", results);\n          case 6:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n    return _getFilterLogs.apply(this, arguments);\n  }\n  function uninstallFilterHandler(_x6) {\n    return _uninstallFilterHandler.apply(this, arguments);\n  } //\n  // utils\n  //\n  function _uninstallFilterHandler() {\n    _uninstallFilterHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(filterIndexHex) {\n      var filterIndex, filter, result;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            // check filter exists\n            filterIndex = hexToInt(filterIndexHex);\n            filter = filters[filterIndex];\n            result = Boolean(filter); // uninstall filter\n            if (!result) {\n              _context8.next = 6;\n              break;\n            }\n            _context8.next = 6;\n            return uninstallFilter(filterIndex);\n          case 6:\n            return _context8.abrupt(\"return\", result);\n          case 7:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return _uninstallFilterHandler.apply(this, arguments);\n  }\n  function installFilter(_x7) {\n    return _installFilter.apply(this, arguments);\n  }\n  function _installFilter() {\n    _installFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(filter) {\n      var prevFilterCount, currentBlock, newFilterCount;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            prevFilterCount = objValues(filters).length; // install filter\n            _context9.next = 3;\n            return blockTracker.getLatestBlock();\n          case 3:\n            currentBlock = _context9.sent;\n            _context9.next = 6;\n            return filter.initialize({\n              currentBlock: currentBlock\n            });\n          case 6:\n            filterIndex++;\n            filters[filterIndex] = filter;\n            filter.id = filterIndex;\n            filter.idHex = intToHex(filterIndex);\n            // update block tracker subs\n            newFilterCount = objValues(filters).length;\n            updateBlockTrackerSubs({\n              prevFilterCount: prevFilterCount,\n              newFilterCount: newFilterCount\n            });\n            return _context9.abrupt(\"return\", filterIndex);\n          case 13:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }));\n    return _installFilter.apply(this, arguments);\n  }\n  function uninstallFilter(_x8) {\n    return _uninstallFilter.apply(this, arguments);\n  }\n  function _uninstallFilter() {\n    _uninstallFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(filterIndex) {\n      var prevFilterCount, newFilterCount;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            prevFilterCount = objValues(filters).length;\n            delete filters[filterIndex];\n            // update block tracker subs\n            newFilterCount = objValues(filters).length;\n            updateBlockTrackerSubs({\n              prevFilterCount: prevFilterCount,\n              newFilterCount: newFilterCount\n            });\n          case 4:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }));\n    return _uninstallFilter.apply(this, arguments);\n  }\n  function uninstallAllFilters() {\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n  function _uninstallAllFilters() {\n    _uninstallAllFilters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n      var prevFilterCount;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            prevFilterCount = objValues(filters).length;\n            filters = {};\n            // update block tracker subs\n            updateBlockTrackerSubs({\n              prevFilterCount: prevFilterCount,\n              newFilterCount: 0\n            });\n          case 3:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }));\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n  function updateBlockTrackerSubs(_ref5) {\n    var prevFilterCount = _ref5.prevFilterCount,\n      newFilterCount = _ref5.newFilterCount;\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater);\n      return;\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater);\n      return;\n    }\n  }\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n    var filter,\n      result,\n      _args12 = arguments;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return createFilterFn.apply(void 0, _args12);\n        case 2:\n          filter = _context12.sent;\n          result = intToHex(filter.id);\n          return _context12.abrupt(\"return\", result);\n        case 5:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12);\n  })));\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(req, res) {\n      var result;\n      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n        while (1) switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.next = 2;\n            return asyncFn.apply(null, req.params);\n          case 2:\n            result = _context13.sent;\n            res.result = result;\n          case 4:\n          case \"end\":\n            return _context13.stop();\n        }\n      }, _callee13);\n    }));\n    return function (_x9, _x10) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n}\nfunction mutexMiddlewareWrapper(_ref8) {\n  var mutex = _ref8.mutex;\n  return function (middleware) {\n    return /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(req, res, next, end) {\n        var releaseLock;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return mutex.acquire();\n            case 2:\n              releaseLock = _context14.sent;\n              releaseLock();\n              middleware(req, res, next, end);\n            case 5:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14);\n      }));\n      return function (_x11, _x12, _x13, _x14) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n  };\n}\nfunction objValues(obj, fn) {\n  var values = [];\n  for (var key in obj) {\n    values.push(obj[key]);\n  }\n  return values;\n}","map":{"version":3,"names":["Mutex","require","createAsyncMiddleware","createJsonRpcMiddleware","LogFilter","BlockFilter","TxFilter","intToHex","hexToInt","module","exports","createEthFilterMiddleware","blockTracker","provider","filterIndex","filters","mutex","waitForFree","mutexMiddlewareWrapper","middleware","eth_newFilter","toFilterCreationMiddleware","newLogFilter","eth_newBlockFilter","newBlockFilter","eth_newPendingTransactionFilter","newPendingTransactionFilter","eth_uninstallFilter","toAsyncRpcMiddleware","uninstallFilterHandler","eth_getFilterChanges","getFilterChanges","eth_getFilterLogs","getFilterLogs","filterUpdater","oldBlock","newBlock","length","acquire","releaseLock","Promise","all","objValues","map","filter","update","console","error","uninstallFilter","destroy","uninstallAllFilters","params","installFilter","filterIndexHex","Error","results","getChangesAndClear","type","getAllResults","result","Boolean","prevFilterCount","getLatestBlock","currentBlock","initialize","id","idHex","newFilterCount","updateBlockTrackerSubs","on","removeListener","createFilterFn","asyncFn","req","res","apply","next","end","obj","fn","values","key","push"],"sources":["C:/Users/USER/Documents/Work_hub/node_modules/eth-json-rpc-filters/index.js"],"sourcesContent":["const Mutex = require('async-mutex').Mutex\nconst { createAsyncMiddleware } = require('json-rpc-engine')\nconst createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold')\nconst LogFilter = require('./log-filter.js')\nconst BlockFilter = require('./block-filter.js')\nconst TxFilter = require('./tx-filter.js')\nconst { intToHex, hexToInt } = require('./hexUtils')\n\nmodule.exports = createEthFilterMiddleware\n\nfunction createEthFilterMiddleware({ blockTracker, provider }) {\n\n  // create filter collection\n  let filterIndex = 0\n  let filters = {}\n  // create update mutex\n  const mutex = new Mutex()\n  const waitForFree = mutexMiddlewareWrapper({ mutex })\n\n  const middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),\n  })\n\n  // setup filter updating and destroy handler\n  const filterUpdater = async ({ oldBlock, newBlock }) => {\n    if (filters.length === 0) return\n    // lock update reads\n    const releaseLock = await mutex.acquire()\n    try {\n      // process all filters in parallel\n      await Promise.all(objValues(filters).map(async (filter) => {\n        try {\n         await filter.update({ oldBlock, newBlock })\n        } catch (err) {\n          // handle each error individually so filter update errors don't affect other filters\n          console.error(err)\n        }\n      }))\n    } catch (err) {\n      // log error so we don't skip the releaseLock\n      console.error(err)\n    }\n    // unlock update reads\n    releaseLock()\n  }\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter\n  middleware.newBlockFilter = newBlockFilter\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter\n  middleware.uninstallFilter = uninstallFilterHandler\n  middleware.getFilterChanges = getFilterChanges\n  middleware.getFilterLogs = getFilterLogs\n\n  // expose destroy method for cleanup\n  middleware.destroy = () => {\n    uninstallAllFilters()\n  }\n\n  return middleware\n\n  //\n  // new filters\n  //\n\n  async function newLogFilter(params) {\n    const filter = new LogFilter({ provider, params })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newBlockFilter() {\n    const filter = new BlockFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newPendingTransactionFilter() {\n    const filter = new TxFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  //\n  // get filter changes\n  //\n\n  async function getFilterChanges(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    const results = filter.getChangesAndClear()\n    return results\n  }\n\n  async function getFilterLogs(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    // only return results for log filters\n    if (filter.type === 'log') {\n      results = filter.getAllResults()\n    } else {\n      results = []\n    }\n    return results\n  }\n\n\n  //\n  // remove filters\n  //\n\n\n  async function uninstallFilterHandler(filterIndexHex) {\n    // check filter exists\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    const result = Boolean(filter)\n    // uninstall filter\n    if (result) {\n      await uninstallFilter(filterIndex)\n    }\n    return result\n  }\n\n  //\n  // utils\n  //\n\n  async function installFilter(filter) {\n    const prevFilterCount = objValues(filters).length\n    // install filter\n    const currentBlock = await blockTracker.getLatestBlock()\n    await filter.initialize({ currentBlock })\n    filterIndex++\n    filters[filterIndex] = filter\n    filter.id = filterIndex\n    filter.idHex = intToHex(filterIndex)\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n    return filterIndex\n  }\n\n  async function uninstallFilter(filterIndex) {\n    const prevFilterCount = objValues(filters).length\n    delete filters[filterIndex]\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n  }\n\n  async function uninstallAllFilters() {\n    const prevFilterCount = objValues(filters).length\n    filters = {}\n    // update block tracker subs\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 })\n  }\n\n  function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater)\n      return\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater)\n      return\n    }\n  }\n\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware(async (...args) => {\n    const filter = await createFilterFn(...args)\n    const result = intToHex(filter.id)\n    return result\n  })\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware(async (req, res) => {\n    const result = await asyncFn.apply(null, req.params)\n    res.result = result\n  })\n}\n\nfunction mutexMiddlewareWrapper({ mutex }) {\n  return (middleware) => {\n    return async (req, res, next, end) => {\n      // wait for mutex available\n      // we can release immediately because\n      // we just need to make sure updates aren't active\n      const releaseLock = await mutex.acquire()\n      releaseLock()\n      middleware(req, res, next, end)\n    }\n  }\n}\n\nfunction objValues(obj, fn){\n  const values = []\n  for (let key in obj) {\n    values.push(obj[key])\n  }\n  return values\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}