{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\nvar _slicedToArray = require(\"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _inherits = require(\"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar _createSuper = require(\"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcEngine = void 0;\nvar safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nvar eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nvar JsonRpcEngine = /*#__PURE__*/function (_safe_event_emitter_) {\n  _inherits(JsonRpcEngine, _safe_event_emitter_);\n  var _super = _createSuper(JsonRpcEngine);\n  function JsonRpcEngine() {\n    var _this;\n    _classCallCheck(this, JsonRpcEngine);\n    _this = _super.call(this);\n    _this._middleware = [];\n    return _this;\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  _createClass(JsonRpcEngine, [{\n    key: \"push\",\n    value: function push(middleware) {\n      this._middleware.push(middleware);\n    }\n  }, {\n    key: \"handle\",\n    value: function handle(req, cb) {\n      if (cb && typeof cb !== 'function') {\n        throw new Error('\"callback\" must be a function if provided.');\n      }\n      if (Array.isArray(req)) {\n        if (cb) {\n          return this._handleBatch(req, cb);\n        }\n        return this._handleBatch(req);\n      }\n      if (cb) {\n        return this._handle(req, cb);\n      }\n      return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n  }, {\n    key: \"asMiddleware\",\n    value: function asMiddleware() {\n      var _this2 = this;\n      return /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res, next, end) {\n          var _yield$JsonRpcEngine$, _yield$JsonRpcEngine$2, middlewareError, isComplete, returnHandlers;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return JsonRpcEngine._runAllMiddleware(req, res, _this2._middleware);\n              case 3:\n                _yield$JsonRpcEngine$ = _context2.sent;\n                _yield$JsonRpcEngine$2 = _slicedToArray(_yield$JsonRpcEngine$, 3);\n                middlewareError = _yield$JsonRpcEngine$2[0];\n                isComplete = _yield$JsonRpcEngine$2[1];\n                returnHandlers = _yield$JsonRpcEngine$2[2];\n                if (!isComplete) {\n                  _context2.next = 12;\n                  break;\n                }\n                _context2.next = 11;\n                return JsonRpcEngine._runReturnHandlers(returnHandlers);\n              case 11:\n                return _context2.abrupt(\"return\", end(middlewareError));\n              case 12:\n                return _context2.abrupt(\"return\", next( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(handlerCallback) {\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.prev = 0;\n                          _context.next = 3;\n                          return JsonRpcEngine._runReturnHandlers(returnHandlers);\n                        case 3:\n                          _context.next = 8;\n                          break;\n                        case 5:\n                          _context.prev = 5;\n                          _context.t0 = _context[\"catch\"](0);\n                          return _context.abrupt(\"return\", handlerCallback(_context.t0));\n                        case 8:\n                          return _context.abrupt(\"return\", handlerCallback());\n                        case 9:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }, _callee, null, [[0, 5]]);\n                  }));\n                  return function (_x5) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n              case 15:\n                _context2.prev = 15;\n                _context2.t0 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\", end(_context2.t0));\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, null, [[0, 15]]);\n        }));\n        return function (_x, _x2, _x3, _x4) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    }\n  }, {\n    key: \"_handleBatch\",\n    value: function () {\n      var _handleBatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(reqs, cb) {\n        var responses;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return Promise.all(\n              // 1. Begin executing each request in the order received\n              reqs.map(this._promiseHandle.bind(this)));\n            case 3:\n              responses = _context3.sent;\n              if (!cb) {\n                _context3.next = 6;\n                break;\n              }\n              return _context3.abrupt(\"return\", cb(null, responses));\n            case 6:\n              return _context3.abrupt(\"return\", responses);\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](0);\n              if (!cb) {\n                _context3.next = 13;\n                break;\n              }\n              return _context3.abrupt(\"return\", cb(_context3.t0));\n            case 13:\n              throw _context3.t0;\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 9]]);\n      }));\n      function _handleBatch(_x6, _x7) {\n        return _handleBatch2.apply(this, arguments);\n      }\n      return _handleBatch;\n    }()\n    /**\n     * A promise-wrapped _handle.\n     */\n  }, {\n    key: \"_promiseHandle\",\n    value: function _promiseHandle(req) {\n      var _this3 = this;\n      return new Promise(function (resolve) {\n        _this3._handle(req, function (_err, res) {\n          // There will always be a response, and it will always have any error\n          // that is caught and propagated.\n          resolve(res);\n        });\n      });\n    }\n    /**\n     * Ensures that the request object is valid, processes it, and passes any\n     * error and the response object to the given callback.\n     *\n     * Does not reject.\n     */\n  }, {\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(callerReq, cb) {\n        var _error2, _error3, req, res, error;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(!callerReq || Array.isArray(callerReq) || typeof callerReq !== 'object')) {\n                _context4.next = 3;\n                break;\n              }\n              _error2 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, \"Requests must be plain objects. Received: \".concat(typeof callerReq), {\n                request: callerReq\n              });\n              return _context4.abrupt(\"return\", cb(_error2, {\n                id: undefined,\n                jsonrpc: '2.0',\n                error: _error2\n              }));\n            case 3:\n              if (!(typeof callerReq.method !== 'string')) {\n                _context4.next = 6;\n                break;\n              }\n              _error3 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, \"Must specify a string method. Received: \".concat(typeof callerReq.method), {\n                request: callerReq\n              });\n              return _context4.abrupt(\"return\", cb(_error3, {\n                id: callerReq.id,\n                jsonrpc: '2.0',\n                error: _error3\n              }));\n            case 6:\n              req = Object.assign({}, callerReq);\n              res = {\n                id: req.id,\n                jsonrpc: req.jsonrpc\n              };\n              error = null;\n              _context4.prev = 9;\n              _context4.next = 12;\n              return this._processRequest(req, res);\n            case 12:\n              _context4.next = 17;\n              break;\n            case 14:\n              _context4.prev = 14;\n              _context4.t0 = _context4[\"catch\"](9);\n              // A request handler error, a re-thrown middleware error, or something\n              // unexpected.\n              error = _context4.t0;\n            case 17:\n              if (error) {\n                // Ensure no result is present on an errored response\n                delete res.result;\n                if (!res.error) {\n                  res.error = eth_rpc_errors_1.serializeError(error);\n                }\n              }\n              return _context4.abrupt(\"return\", cb(error, res));\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[9, 14]]);\n      }));\n      function _handle(_x8, _x9) {\n        return _handle2.apply(this, arguments);\n      }\n      return _handle;\n    }()\n    /**\n     * For the given request and response, runs all middleware and their return\n     * handlers, if any, and ensures that internal request processing semantics\n     * are satisfied.\n     */\n  }, {\n    key: \"_processRequest\",\n    value: function () {\n      var _processRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {\n        var _yield$JsonRpcEngine$3, _yield$JsonRpcEngine$4, error, isComplete, returnHandlers;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n            case 2:\n              _yield$JsonRpcEngine$3 = _context5.sent;\n              _yield$JsonRpcEngine$4 = _slicedToArray(_yield$JsonRpcEngine$3, 3);\n              error = _yield$JsonRpcEngine$4[0];\n              isComplete = _yield$JsonRpcEngine$4[1];\n              returnHandlers = _yield$JsonRpcEngine$4[2];\n              // Throw if \"end\" was not called, or if the response has neither a result\n              // nor an error.\n              JsonRpcEngine._checkForCompletion(req, res, isComplete);\n              // The return handlers should run even if an error was encountered during\n              // middleware processing.\n              _context5.next = 10;\n              return JsonRpcEngine._runReturnHandlers(returnHandlers);\n            case 10:\n              if (!error) {\n                _context5.next = 12;\n                break;\n              }\n              throw error;\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function _processRequest(_x10, _x11) {\n        return _processRequest2.apply(this, arguments);\n      }\n      return _processRequest;\n    }()\n    /**\n     * Serially executes the given stack of middleware.\n     *\n     * @returns An array of any error encountered during middleware execution,\n     * a boolean indicating whether the request was completed, and an array of\n     * middleware-defined return handlers.\n     */\n  }], [{\n    key: \"_runAllMiddleware\",\n    value: function () {\n      var _runAllMiddleware2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res, middlewareStack) {\n        var returnHandlers, error, isComplete, _iterator, _step, middleware, _yield$JsonRpcEngine$5, _yield$JsonRpcEngine$6;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              returnHandlers = [];\n              error = null;\n              isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n              _iterator = _createForOfIteratorHelper(middlewareStack);\n              _context6.prev = 4;\n              _iterator.s();\n            case 6:\n              if ((_step = _iterator.n()).done) {\n                _context6.next = 18;\n                break;\n              }\n              middleware = _step.value;\n              _context6.next = 10;\n              return JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n            case 10:\n              _yield$JsonRpcEngine$5 = _context6.sent;\n              _yield$JsonRpcEngine$6 = _slicedToArray(_yield$JsonRpcEngine$5, 2);\n              error = _yield$JsonRpcEngine$6[0];\n              isComplete = _yield$JsonRpcEngine$6[1];\n              if (!isComplete) {\n                _context6.next = 16;\n                break;\n              }\n              return _context6.abrupt(\"break\", 18);\n            case 16:\n              _context6.next = 6;\n              break;\n            case 18:\n              _context6.next = 23;\n              break;\n            case 20:\n              _context6.prev = 20;\n              _context6.t0 = _context6[\"catch\"](4);\n              _iterator.e(_context6.t0);\n            case 23:\n              _context6.prev = 23;\n              _iterator.f();\n              return _context6.finish(23);\n            case 26:\n              return _context6.abrupt(\"return\", [error, isComplete, returnHandlers.reverse()]);\n            case 27:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[4, 20, 23, 26]]);\n      }));\n      function _runAllMiddleware(_x12, _x13, _x14) {\n        return _runAllMiddleware2.apply(this, arguments);\n      }\n      return _runAllMiddleware;\n    }()\n    /**\n     * Runs an individual middleware.\n     *\n     * @returns An array of any error encountered during middleware exection,\n     * and a boolean indicating whether the request should end.\n     */\n  }, {\n    key: \"_runMiddleware\",\n    value: function _runMiddleware(req, res, middleware, returnHandlers) {\n      return new Promise(function (resolve) {\n        var end = function end(err) {\n          var error = err || res.error;\n          if (error) {\n            res.error = eth_rpc_errors_1.serializeError(error);\n          }\n          // True indicates that the request should end\n          resolve([error, true]);\n        };\n        var next = function next(returnHandler) {\n          if (res.error) {\n            end(res.error);\n          } else {\n            if (returnHandler) {\n              if (typeof returnHandler !== 'function') {\n                end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, \"JsonRpcEngine: \\\"next\\\" return handlers must be functions. \" + \"Received \\\"\".concat(typeof returnHandler, \"\\\" for request:\\n\").concat(jsonify(req)), {\n                  request: req\n                }));\n              }\n              returnHandlers.push(returnHandler);\n            }\n            // False indicates that the request should not end\n            resolve([null, false]);\n          }\n        };\n        try {\n          middleware(req, res, next, end);\n        } catch (error) {\n          end(error);\n        }\n      });\n    }\n    /**\n     * Serially executes array of return handlers. The request and response are\n     * assumed to be in their scope.\n     */\n  }, {\n    key: \"_runReturnHandlers\",\n    value: function () {\n      var _runReturnHandlers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(handlers) {\n        var _iterator2, _step2, _loop;\n        return _regeneratorRuntime().wrap(function _callee7$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _iterator2 = _createForOfIteratorHelper(handlers);\n              _context8.prev = 1;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var handler;\n                return _regeneratorRuntime().wrap(function _loop$(_context7) {\n                  while (1) switch (_context7.prev = _context7.next) {\n                    case 0:\n                      handler = _step2.value;\n                      _context7.next = 3;\n                      return new Promise(function (resolve, reject) {\n                        handler(function (err) {\n                          return err ? reject(err) : resolve();\n                        });\n                      });\n                    case 3:\n                    case \"end\":\n                      return _context7.stop();\n                  }\n                }, _loop);\n              });\n              _iterator2.s();\n            case 4:\n              if ((_step2 = _iterator2.n()).done) {\n                _context8.next = 8;\n                break;\n              }\n              return _context8.delegateYield(_loop(), \"t0\", 6);\n            case 6:\n              _context8.next = 4;\n              break;\n            case 8:\n              _context8.next = 13;\n              break;\n            case 10:\n              _context8.prev = 10;\n              _context8.t1 = _context8[\"catch\"](1);\n              _iterator2.e(_context8.t1);\n            case 13:\n              _context8.prev = 13;\n              _iterator2.f();\n              return _context8.finish(13);\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee7, null, [[1, 10, 13, 16]]);\n      }));\n      function _runReturnHandlers(_x15) {\n        return _runReturnHandlers2.apply(this, arguments);\n      }\n      return _runReturnHandlers;\n    }()\n    /**\n     * Throws an error if the response has neither a result nor an error, or if\n     * the \"isComplete\" flag is falsy.\n     */\n  }, {\n    key: \"_checkForCompletion\",\n    value: function _checkForCompletion(req, res, isComplete) {\n      if (!('result' in res) && !('error' in res)) {\n        throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, \"JsonRpcEngine: Response has no error or result for request:\\n\".concat(jsonify(req)), {\n          request: req\n        });\n      }\n      if (!isComplete) {\n        throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, \"JsonRpcEngine: Nothing ended request:\\n\".concat(jsonify(req)), {\n          request: req\n        });\n      }\n    }\n  }]);\n  return JsonRpcEngine;\n}(safe_event_emitter_1.default);\nexports.JsonRpcEngine = JsonRpcEngine;\nfunction jsonify(request) {\n  return JSON.stringify(request, null, 2);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAuFA;;;;AAAA,IAIaA,aAAc;EAAA;EAAA;EAGzB;IAAA;IAAA;IACE;IACA,MAAKC,WAAW,GAAG,EAAE;IAAC;EACxB;EAEA;;;;;EAAA;IAAA;IAAA,OAKA,cAAWC,UAAmC;MAC5C,IAAI,CAACD,WAAW,CAACE,IAAI,CAACD,UAAiD,CAAC;IAC1E;EAAC;IAAA;IAAA,OA2CD,gBAAOE,GAAY,EAAEC,EAAQ;MAC3B,IAAIA,EAAE,IAAI,OAAOA,EAAE,KAAK,UAAU,EAAE;QAClC,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;;MAG/D,IAAIC,KAAK,CAACC,OAAO,CAACJ,GAAG,CAAC,EAAE;QACtB,IAAIC,EAAE,EAAE;UACN,OAAO,IAAI,CAACI,YAAY,CAACL,GAAG,EAAEC,EAAE,CAAC;;QAEnC,OAAO,IAAI,CAACI,YAAY,CAACL,GAAG,CAAC;;MAG/B,IAAIC,EAAE,EAAE;QACN,OAAO,IAAI,CAACK,OAAO,CAACN,GAA8B,EAAEC,EAAE,CAAC;;MAEzD,OAAO,IAAI,CAACM,cAAc,CAACP,GAA8B,CAAC;IAC5D;IAEA;;;;;;EAAA;IAAA;IAAA,OAMA,wBAAY;MAAA;MACV;QAAA,sEAAO,kBAAOA,GAAG,EAAEQ,GAAG,EAAEC,IAAI,EAAEC,GAAG;UAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAMnBd,aAAa,CAACe,iBAAiB,CAACX,GAAG,EAAEQ,GAAG,EAAE,MAAI,CAACX,WAAW,CAAC;cAAA;gBAAA;gBAAA;gBAHnEe,eAAe;gBACfC,UAAU;gBACVC,cAAc;gBAAA,KAGZD,UAAU;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACNjB,aAAa,CAACmB,kBAAkB,CAACD,cAAc,CAAC;cAAA;gBAAA,kCAC/CJ,GAAG,CAACE,eAA6C,CAAC;cAAA;gBAAA,kCAGpDH,IAAI;kBAAA,uEAAC,iBAAOO,eAAe;oBAAA;sBAAA;wBAAA;0BAAA;0BAAA;0BAAA,OAExBpB,aAAa,CAACmB,kBAAkB,CAACD,cAAc,CAAC;wBAAA;0BAAA;0BAAA;wBAAA;0BAAA;0BAAA;0BAAA,iCAE/CE,eAAe,aAAO;wBAAA;0BAAA,iCAExBA,eAAe,EAAE;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA,CACzB;kBAAA;oBAAA;kBAAA;gBAAA,IAAC;cAAA;gBAAA;gBAAA;gBAAA,kCAEKN,GAAG,cAAO;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA,CAEpB;QAAA;UAAA;QAAA;MAAA;IACH;EAAC;IAAA;IAAA;MAAA,+EAiBO,kBACNO,IAA+B,EAC/BhB,EAAqE;QAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,OAM3CiB,OAAO,CAACC,GAAG;cACjC;cACAF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACb,cAAc,CAACc,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;YAAA;cAHKC,SAAS;cAAA,KAMXrB,EAAE;gBAAA;gBAAA;cAAA;cAAA,kCACGA,EAAE,CAAC,IAAI,EAAEqB,SAAS,CAAC;YAAA;cAAA,kCAErBA,SAAS;YAAA;cAAA;cAAA;cAAA,KAEZrB,EAAE;gBAAA;gBAAA;cAAA;cAAA,kCACGA,EAAE,cAAO;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAKrB;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;EAAA;IAAA;IAAA,OAGQ,wBACND,GAA4B;MAAA;MAE5B,OAAO,IAAIkB,OAAO,CAAC,UAACK,OAAO,EAAI;QAC7B,MAAI,CAACjB,OAAO,CAACN,GAAG,EAAE,UAACwB,IAAI,EAAEhB,GAAG,EAAI;UAC9B;UACA;UACAe,OAAO,CAACf,GAAG,CAAC;QACd,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;IAEA;;;;;;EAAA;IAAA;IAAA;MAAA,0EAMQ,kBACNiB,SAAkC,EAClCxB,EAAgE;QAAA;QAAA;UAAA;YAAA;cAAA,MAG9D,CAACwB,SAAS,IACVtB,KAAK,CAACC,OAAO,CAACqB,SAAS,CAAC,IACxB,OAAOA,SAAS,KAAK,QAAQ;gBAAA;gBAAA;cAAA;cAEvBC,OAAK,GAAG,IAAIC,iCAAgB,CAChCA,2BAAU,CAACC,GAAG,CAACC,cAAc,sDACgB,OAAOJ,SAAS,GAC7D;gBAAEK,OAAO,EAAEL;cAAS,CAAE,CACvB;cAAA,kCACMxB,EAAE,CAACyB,OAAK,EAAE;gBAAEK,EAAE,EAAEC,SAAS;gBAAEC,OAAO,EAAE,KAAK;gBAAEP,KAAK,EAALA;cAAK,CAAE,CAAC;YAAA;cAAA,MAGxD,OAAOD,SAAS,CAACS,MAAM,KAAK,QAAQ;gBAAA;gBAAA;cAAA;cAChCR,OAAK,GAAG,IAAIC,iCAAgB,CAChCA,2BAAU,CAACC,GAAG,CAACC,cAAc,oDACc,OAAOJ,SAAS,CAACS,MAAM,GAClE;gBAAEJ,OAAO,EAAEL;cAAS,CAAE,CACvB;cAAA,kCACMxB,EAAE,CAACyB,OAAK,EAAE;gBAAEK,EAAE,EAAEN,SAAS,CAACM,EAAE;gBAAEE,OAAO,EAAE,KAAK;gBAAEP,KAAK,EAALA;cAAK,CAAE,CAAC;YAAA;cAGzD1B,GAAG,qBAAiCyB,SAAS,CAAE;cAC/CjB,GAAG,GAAoC;gBAC3CuB,EAAE,EAAE/B,GAAG,CAAC+B,EAAE;gBACVE,OAAO,EAAEjC,GAAG,CAACiC;eACd;cACGP,KAAK,GAA+B,IAAI;cAAA;cAAA;cAAA,OAGpC,IAAI,CAACS,eAAe,CAACnC,GAAG,EAAEQ,GAAG,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAEpC;cACA;cACAkB,KAAK,eAAS;YAAC;cAGjB,IAAIA,KAAK,EAAE;gBACT;gBACA,OAAOlB,GAAG,CAAC4B,MAAM;gBACjB,IAAI,CAAC5B,GAAG,CAACkB,KAAK,EAAE;kBACdlB,GAAG,CAACkB,KAAK,GAAGC,+BAAc,CAACD,KAAK,CAAC;;;cAEpC,kCAEMzB,EAAE,CAACyB,KAAK,EAAElB,GAA+B,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAClD;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;EAAA;IAAA;IAAA;MAAA,kFAKQ,kBACNR,GAA4B,EAC5BQ,GAAoC;QAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OAM1BZ,aAAa,CAACe,iBAAiB,CAACX,GAAG,EAAEQ,GAAG,EAAE,IAAI,CAACX,WAAW,CAAC;YAAA;cAAA;cAAA;cAHnE6B,KAAK;cACLb,UAAU;cACVC,cAAc;cAGhB;cACA;cACAlB,aAAa,CAACyC,mBAAmB,CAACrC,GAAG,EAAEQ,GAAG,EAAEK,UAAU,CAAC;cAEvD;cACA;cAAA;cAAA,OACMjB,aAAa,CAACmB,kBAAkB,CAACD,cAAc,CAAC;YAAA;cAAA,KAIlDY,KAAK;gBAAA;gBAAA;cAAA;cAAA,MACDA,KAAK;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAEd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;;;EAAA;IAAA;IAAA;MAAA,oFAOQ,kBACN1B,GAA4B,EAC5BQ,GAAoC,EACpC8B,eAAsD;QAAA;QAAA;UAAA;YAAA;cAQhDxB,cAAc,GAAiC,EAAE;cACnDY,KAAK,GAAG,IAAI;cACZb,UAAU,GAAG,KAAK,EAEtB;cAAA,uCACyByB,eAAe;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAA7BxC,UAAU;cAAA;cAAA,OACSF,aAAa,CAAC2C,cAAc,CACtDvC,GAAG,EACHQ,GAAG,EACHV,UAAU,EACVgB,cAAc,CACf;YAAA;cAAA;cAAA;cALAY,KAAK;cAAEb,UAAU;cAAA,KAMdA,UAAU;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA,kCAIT,CAACa,KAAK,EAAEb,UAAU,EAAEC,cAAc,CAAC0B,OAAO,EAAE,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACrD;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;;EAAA;IAAA;IAAA,OAMQ,wBACNxC,GAA4B,EAC5BQ,GAAoC,EACpCV,UAA+C,EAC/CgB,cAA4C;MAE5C,OAAO,IAAII,OAAO,CAAC,UAACK,OAAO,EAAI;QAC7B,IAAMb,GAAG,GAA6B,SAAhCA,GAAG,CAA8B+B,GAAa,EAAI;UACtD,IAAMf,KAAK,GAAGe,GAAG,IAAIjC,GAAG,CAACkB,KAAK;UAC9B,IAAIA,KAAK,EAAE;YACTlB,GAAG,CAACkB,KAAK,GAAGC,+BAAc,CAACD,KAAK,CAAC;;UAEnC;UACAH,OAAO,CAAC,CAACG,KAAK,EAAE,IAAI,CAAC,CAAC;QACxB,CAAC;QAED,IAAMjB,IAAI,GAA8B,SAAlCA,IAAI,CACRiC,aAA0C,EACxC;UACF,IAAIlC,GAAG,CAACkB,KAAK,EAAE;YACbhB,GAAG,CAACF,GAAG,CAACkB,KAAK,CAAC;WACf,MAAM;YACL,IAAIgB,aAAa,EAAE;cACjB,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;gBACvChC,GAAG,CACD,IAAIiB,iCAAgB,CAClBA,2BAAU,CAACC,GAAG,CAACe,QAAQ,EACvB,qFACe,OAAOD,aAAa,8BAAmBE,OAAO,CACzD5C,GAAG,CACJ,CAAE,EACL;kBAAE8B,OAAO,EAAE9B;gBAAG,CAAE,CACjB,CACF;;cAEHc,cAAc,CAACf,IAAI,CAAC2C,aAAa,CAAC;;YAGpC;YACAnB,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;;QAE1B,CAAC;QAED,IAAI;UACFzB,UAAU,CAACE,GAAG,EAAEQ,GAAG,EAAEC,IAAI,EAAEC,GAAG,CAAC;SAChC,CAAC,OAAOgB,KAAK,EAAE;UACdhB,GAAG,CAACgB,KAAK,CAAC;;MAEd,CAAC,CAAC;IACJ;IAEA;;;;EAAA;IAAA;IAAA;MAAA,qFAIQ,kBACNmB,QAAsC;QAAA;QAAA;UAAA;YAAA;cAAA,wCAEhBA,QAAQ;cAAA;cAAA;gBAAA;gBAAA;kBAAA;oBAAA;sBAAnBC,OAAO;sBAAA;sBAAA,OACV,IAAI5B,OAAO,CAAC,UAACK,OAAO,EAAEwB,MAAM,EAAI;wBACpCD,OAAO,CAAC,UAACL,GAAG;0BAAA,OAAMA,GAAG,GAAGM,MAAM,CAACN,GAAG,CAAC,GAAGlB,OAAO,EAAE;wBAAA,CAAC,CAAC;sBACnD,CAAC,CAAC;oBAAA;oBAAA;sBAAA;kBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAEL;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;EAAA;IAAA;IAAA,OAIQ,6BACNvB,GAA4B,EAC5BQ,GAAoC,EACpCK,UAAmB;MAEnB,IAAI,EAAE,QAAQ,IAAIL,GAAG,CAAC,IAAI,EAAE,OAAO,IAAIA,GAAG,CAAC,EAAE;QAC3C,MAAM,IAAImB,iCAAgB,CACxBA,2BAAU,CAACC,GAAG,CAACe,QAAQ,yEACyCC,OAAO,CACrE5C,GAAG,CACJ,GACD;UAAE8B,OAAO,EAAE9B;QAAG,CAAE,CACjB;;MAEH,IAAI,CAACa,UAAU,EAAE;QACf,MAAM,IAAIc,iCAAgB,CACxBA,2BAAU,CAACC,GAAG,CAACe,QAAQ,mDACmBC,OAAO,CAAC5C,GAAG,CAAC,GACtD;UAAE8B,OAAO,EAAE9B;QAAG,CAAE,CACjB;;IAEL;EAAC;EAAA;AAAA,EApYgCgD,4BAAgB;AAAnDC;AAuYA,SAASL,OAAO,CAACd,OAAgC;EAC/C,OAAOoB,IAAI,CAACC,SAAS,CAACrB,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;AACzC","names":["JsonRpcEngine","_middleware","middleware","push","req","cb","Error","Array","isArray","_handleBatch","_handle","_promiseHandle","res","next","end","_runAllMiddleware","middlewareError","isComplete","returnHandlers","_runReturnHandlers","handlerCallback","reqs","Promise","all","map","bind","responses","resolve","_err","callerReq","error","eth_rpc_errors_1","rpc","invalidRequest","request","id","undefined","jsonrpc","method","_processRequest","result","_checkForCompletion","middlewareStack","_runMiddleware","reverse","err","returnHandler","internal","jsonify","handlers","handler","reject","safe_event_emitter_1","exports","JSON","stringify"],"sourceRoot":"","sources":["../src/JsonRpcEngine.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}