{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\USER\\\\Documents\\\\Work_hub\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { noChange as t } from \"../lit-html.js\";\nimport { directive as i, Directive as s, PartType as r } from \"../directive.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar o = i( /*#__PURE__*/function (_s) {\n  _inherits(_class, _s);\n  var _super = _createSuper(_class);\n  function _class(t) {\n    var _this;\n    _classCallCheck(this, _class);\n    var i;\n    if (_this = _super.call(this, t), t.type !== r.ATTRIBUTE || \"class\" !== t.name || (null === (i = t.strings) || void 0 === i ? void 0 : i.length) > 2) throw Error(\"`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.\");\n    return _possibleConstructorReturn(_this);\n  }\n  _createClass(_class, [{\n    key: \"render\",\n    value: function render(t) {\n      return \" \" + Object.keys(t).filter(function (i) {\n        return t[i];\n      }).join(\" \") + \" \";\n    }\n  }, {\n    key: \"update\",\n    value: function update(i, _ref) {\n      var _this2 = this;\n      var _ref2 = _slicedToArray(_ref, 1),\n        s = _ref2[0];\n      var r, o;\n      if (void 0 === this.nt) {\n        this.nt = new Set(), void 0 !== i.strings && (this.st = new Set(i.strings.join(\" \").split(/\\s/).filter(function (t) {\n          return \"\" !== t;\n        })));\n        for (var _t in s) s[_t] && !(null === (r = this.st) || void 0 === r ? void 0 : r.has(_t)) && this.nt.add(_t);\n        return this.render(s);\n      }\n      var e = i.element.classList;\n      this.nt.forEach(function (t) {\n        t in s || (e.remove(t), _this2.nt.delete(t));\n      });\n      for (var _t2 in s) {\n        var _i = !!s[_t2];\n        _i === this.nt.has(_t2) || (null === (o = this.st) || void 0 === o ? void 0 : o.has(_t2)) || (_i ? (e.add(_t2), this.nt.add(_t2)) : (e.remove(_t2), this.nt.delete(_t2)));\n      }\n      return t;\n    }\n  }]);\n  return _class;\n}(s));\nexport { o as classMap };","map":{"version":3,"mappings":";;;;;;;;;;;;;IA2HaA,IAAWC;EAAAA;EAAAA;EA7FtBC,gBAAYC;IAAAA;IAAAA;IAAAA;IAEV,IADAC,0BAAMD,IAEJA,EAASE,SAASC,EAASC,aACT,YAAlBJ,EAASK,mBACRC,MAASC,sCAASC,UAAoB,GAEvC,MAAUC,MACR,qGAIL;IAAA;EAAA;EAEDC;IAAAA;IAAAA,uBAAOC;MAEL,OACE,MACAC,OAAOC,KAAKF,GACTG,OAAQC;QAAAA,OAAQJ,EAAUI;MAAAA,GAC1BC,KAAK,OACR,GAEH;IAAA;EAEQC;IAAAA;IAAAA,uBAAOC,SAAsBP;MAAAA;MAAAA;QAAAA;MAAAA;MAEpC,SAA8BQ,MAA1BC,KAAKC,IAAgC;QACvCD,KAAKC,KAAmB,IAAIC,YACPH,MAAjBD,EAAKX,YACPa,KAAKG,KAAiB,IAAID,IACxBJ,EAAKX,QACFS,KAAK,KACLQ,MAAM,MACNV,OAAQW;UAAAA,OAAY,OAANA;QAAAA;QAGrB,KAAK,IAAMpB,MAAQM,GACbA,EAAUN,SAA+B,UAArBC,SAAKiB,YAAgB,yBAAIlB,QAC/Ce,KAAKC,GAAiBK,IAAIrB;QAG9B,OAAOe,KAAKV,OAAOC,EACpB;MAAA;MAED,IAAMgB,IAAYT,EAAKU,QAAQD;MAK/BP,KAAKC,GAAiBQ,QAASxB;QACvBA,KAAQM,MACZgB,EAAUG,OAAOzB,IACjBe,OAAKC,GAAkBU,OAAO1B,GAC/B;MAAA;MAIH,KAAK,IAAMA,OAAQM,GAAW;QAG5B,IAAMqB,OAAUrB,EAAUN;QAExB2B,OAAUZ,KAAKC,GAAiBY,IAAI5B,SACd,UAArB6B,SAAKX,YAAgB,yBAAIlB,UAEtB2B,MACFL,EAAUD,IAAIrB,MACde,KAAKC,GAAiBK,IAAIrB,SAE1BsB,EAAUG,OAAOzB,MACjBe,KAAKC,GAAiBU,OAAO1B,MAGlC;MAAA;MACD,OAAO8B,CACR;IAAA;EAAA;EAAA;AAAA,EApF6BC,GAoF7B;AAAA","names":["classMap","directive","constructor","partInfo","super","type","PartType","ATTRIBUTE","name","_a","strings","length","Error","render","classInfo","Object","keys","filter","key","join","update","part","undefined","this","_previousClasses","Set","_staticClasses","split","s","add","classList","element","forEach","remove","delete","value","has","_b","noChange","Directive"],"sources":["../src/directives/class-map.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of class names to truthy values.\n */\nexport interface ClassInfo {\n  readonly [name: string]: string | boolean | number;\n}\n\nclass ClassMapDirective extends Directive {\n  /**\n   * Stores the ClassInfo object applied to a given AttributePart.\n   * Used to unset existing values when a new ClassInfo object is applied.\n   */\n  private _previousClasses?: Set<string>;\n  private _staticClasses?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        '`classMap()` can only be used in the `class` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(classInfo: ClassInfo) {\n    // Add spaces to ensure separation from static classes\n    return (\n      ' ' +\n      Object.keys(classInfo)\n        .filter((key) => classInfo[key])\n        .join(' ') +\n      ' '\n    );\n  }\n\n  override update(part: AttributePart, [classInfo]: DirectiveParameters<this>) {\n    // Remember dynamic classes on the first render\n    if (this._previousClasses === undefined) {\n      this._previousClasses = new Set();\n      if (part.strings !== undefined) {\n        this._staticClasses = new Set(\n          part.strings\n            .join(' ')\n            .split(/\\s/)\n            .filter((s) => s !== '')\n        );\n      }\n      for (const name in classInfo) {\n        if (classInfo[name] && !this._staticClasses?.has(name)) {\n          this._previousClasses.add(name);\n        }\n      }\n      return this.render(classInfo);\n    }\n\n    const classList = part.element.classList;\n\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that we don't require down-level\n    // iteration.\n    this._previousClasses.forEach((name) => {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        this._previousClasses!.delete(name);\n      }\n    });\n\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      const value = !!classInfo[name];\n      if (\n        value !== this._previousClasses.has(name) &&\n        !this._staticClasses?.has(name)\n      ) {\n        if (value) {\n          classList.add(name);\n          this._previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          this._previousClasses.delete(name);\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies dynamic CSS classes.\n *\n * This must be used in the `class` attribute and must be the only part used in\n * the attribute. It takes each property in the `classInfo` argument and adds\n * the property name to the element's `classList` if the property value is\n * truthy; if the property value is falsey, the property name is removed from\n * the element's `class`.\n *\n * For example `{foo: bar}` applies the class `foo` if the value of `bar` is\n * truthy.\n *\n * @param classInfo\n */\nexport const classMap = directive(ClassMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {ClassMapDirective};\n"]},"metadata":{},"sourceType":"module"}